/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sys;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import jdk.nashorn.internal.ir.CatchNode;

/**
 *
 * @author helmi
 */
public class main_fram extends javax.swing.JFrame {
static String vv="";
    public static String names[] = {"", "ali", "Ahmad", "Add.."};
    static String temp3[];
    static String temp4[];
    static String temp5[];
    static String temp6[];
    static String temp7[];
    static String temp8[];
    static String temp9[][];
    static String temp10[];
    static int comm = 0;
    static String res[][];
    static String ress[];
    static patient wait []= new patient[0];
    static String waits[]= new String[0];
    static String notifications[] ;
    /**
     * Creates new form main_frame
     */
    public main_fram() {


        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(240, 214, 237));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("البحث");

        jTextField1.setBackground(new java.awt.Color(204, 255, 204));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        sename();
        jList1.setBackground(new java.awt.Color(204, 204, 255));
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings =  temp10 ;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        DefaultListCellRenderer renderer =  (DefaultListCellRenderer)jList1.getCellRenderer();
        renderer.setHorizontalAlignment(JLabel.RIGHT);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("مريض جديد");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("عرض البيانات");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("اضافة ");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jList2.setBackground(new java.awt.Color(204, 255, 204));
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        DefaultListCellRenderer renderer2 =  (DefaultListCellRenderer)jList2.getCellRenderer();
        renderer2.setHorizontalAlignment(JLabel.RIGHT);
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel2.setText("Reception");

        jList3.setBackground(new java.awt.Color(204, 255, 255));
        jList3.setModel(new javax.swing.AbstractListModel() {

            public int getSize() { return waits.length; }
            public Object getElementAt(int i) { return waits[i]; }
        });
        jList3.setSelectionBackground(new java.awt.Color(0, 255, 0));
        jList3.setSelectionForeground(new java.awt.Color(255, 0, 0));
        DefaultListCellRenderer renderer3 =  (DefaultListCellRenderer)jList3.getCellRenderer();
        renderer3.setHorizontalAlignment(JLabel.RIGHT);
        jList3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList3);

        jButton5.setText("setup");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("كشف");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 166, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        jProgressBar1.setValue(0);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "كشف", "استشارة", "عمليه" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton6)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(148, 148, 148))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton5)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(53, 53, 53))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(11, 11, 11)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        try {
            new_patient.go();
            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        curname();
        curcat();
        discat();
        disname();
       
        try {
            curplace();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            curformate();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        setup.setupp();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        curname();
        curcat();
        discat();
        disname();
        patient p = new patient();
        if(jList2.getSelectedIndex() != -1){
        try {
            comm--;
            p=p.getbyname(res[jList2.getSelectedIndex()][0], res[jList2.getSelectedIndex()][1], res[jList2.getSelectedIndex()][2]);
       vv = res[jList2.getSelectedIndex()][3];
      
          
            String r[][] =new String[comm][4];
        
        int j = 0;
            for (int i = 0; i < ress.length; i++) {
                if (i!=jList2.getSelectedIndex()){
                r[j][0]=res[i][0];
                r[j][1]=res[i][1];
                r[j][2]=res[i][2];
                r[j][3]=res[i][3];
                    j++;
                   
                    
                }}
                ress = new  String[r.length];
                res = new String[comm][4];
                for (int i = 0; i < ress.length; i++) {
                    res[i][0]=r[i][0];
                    res[i][1]=r[i][1];
                    res[i][2]=r[i][2];
                    res[i][3]=r[i][3];
                    
                    ress[i]=r[i][0];
                    ress[i]+=" "+r[i][1];
                    ress[i]+=" "+r[i][2];
                    
                }
                
                jList2.setModel(new javax.swing.AbstractListModel() {
    String[] strings = ress;
    public int getSize() { return strings.length; }
    public Object getElementAt(int i) { return strings[i]; }
});
            
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            visit.pv=p;
            
             visit.vv=vv;
        try {
              visit.chor=getchor(visit.pv.id);
        visit.allchor =getallchor();
        visit.allchoreye =getallchoreye();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }
        else if (jList3.getSelectedIndex() !=-1){
            p= wait[jList3.getSelectedIndex()];
            String r[] = new String[waits.length-1];
            int j = 0;
            patient temps[] = new  patient[r.length];
            for (int i = 0; i < waits.length; i++) {
                if (i!=jList3.getSelectedIndex()){
                    r[j]=waits[i];
                    temps[j] = wait[i];
                    j++;
                   
                    
                }}
            wait = new patient[temps.length];
            wait = temps;
            waits = r;
            jList3.setModel(new javax.swing.AbstractListModel() {
                String[] strings = waits;
                public int getSize() { return strings.length; }
                public Object getElementAt(int i) { return strings[i]; }
});
        visit.pv=p;
            
        visit.vv=vv;
        try {
              visit.chor=getchor(visit.pv.id);
        visit.allchor =getallchor();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        try {
            visit.visit();
            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6MouseClicked

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

        jProgressBar1.setValue(20);
        String s = (jTextField1.getText());
        s.trim();
        sename(s);
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = temp10;

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        jProgressBar1.setValue(100);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        String ss[][] = new String[++comm][4];
        int i;
        for (i = 0; i < ss.length - 1; i++) {
            ss[i][0] = res[i][0];
            ss[i][1] = res[i][1];
            ss[i][2] = res[i][2];
            ss[i][3] = res[i][3];
        }
        ss[i][0] = temp9[jList1.getSelectedIndex()][0];
        ss[i][1] = temp9[jList1.getSelectedIndex()][1];
        ss[i][2] = temp9[jList1.getSelectedIndex()][2];
        ss[i][3] = jComboBox1.getSelectedItem().toString();
        res = new String[comm][4];
        ress = new String[comm];
        for (i = 0; i < ss.length; i++) {
            res[i][0] = ss[i][0];
            res[i][1] = ss[i][1];
            res[i][2] = ss[i][2];
            res[i][3] = ss[i][3];
            ress[i] = res[i][0];
            ress[i] += " " + res[i][1];
            ress[i] += " " + res[i][2];
        }
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = ress;

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        patient p = new patient();
        try {
            p = p.getbyname(temp9[jList1.getSelectedIndex()][0], temp9[jList1.getSelectedIndex()][1], temp9[jList1.getSelectedIndex()][2]);// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
jList3.clearSelection();
        // TODO add your handling code here:
    }//GEN-LAST:event_jList2MouseClicked

    private void jList3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList3MouseClicked
jList2.clearSelection();
        // TODO add your handling code here:
    }//GEN-LAST:event_jList3MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         try {

          

        } catch (Exception e) {
//        / If Nimbus is not available, you can set to another look and feel.

//            Cant get it to compile or work.

}

         try {
            main_fram.notifications = db.getnoti();
            notification.shownote();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_fram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_fram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_fram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_fram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
Date t = new Date(System.currentTimeMillis());
        System.out.println(t);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                JPanel panel = new JPanel();
//                DatePickerExample v = new DatePickerExample(panel);
//                panel = new DatePickerExample(panel);

                new main_fram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JList jList1;
    private static javax.swing.JList jList2;
    public static javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
public static void comupdate(JComboBox b, String[] l) {
        b.setModel(new javax.swing.DefaultComboBoxModel(l));
    }

    public static void curcat() {
        
        ResultSet rs = db.getdb("select count(cat) from cat_cure order by cat");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(lenght);

        rs = db.getdb("select * from cat_cure order by cat");
        temp3 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp3[i] = rs.getString(1);
                    i++;
                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }

    public static void discat() {
        ResultSet rs = db.getdb("select count(dis_name) from cat_dis order by dis_name");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }

        rs = db.getdb("select * from cat_dis order by dis_name");
        temp4 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp4[i] = rs.getString(1);
                    i++;

                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void disname() {
        ResultSet rs = db.getdb("select count(name) from eye_diseases order by name");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(lenght);

        rs = db.getdb("select name from eye_diseases order by name;");
        temp5 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp5[i] = rs.getString(1);
                    i++;
                    System.out.println(temp5[i - 1]);
                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void curname() {
        ResultSet rs = db.getdb("select count(*) from cure ");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(lenght);

        rs = db.getdb("select describtion from cure order by describtion;");
        temp6 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp6[i] = rs.getString(1);
                    i++;

                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void disname(String cat) {
        ResultSet rs = db.getdb("select count(name) from eye_diseases where cat ='" + cat + "' order by name");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(lenght);

        rs = db.getdb("select name from eye_diseases where cat ='" + cat + "'  order by name;");
        temp5 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp5[i] = rs.getString(1);
                    i++;
                    System.out.println(temp5[i - 1]);
                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void curname(String cat) {
        ResultSet rs = db.getdb("select count(*) from cure where catregory ='" + cat + "';");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }

        rs = db.getdb("select describtion from cure where catregory ='" + cat + "'  order by describtion;");
        temp6 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp6[i] = rs.getString(1);
                    i++;

                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void curformate() throws SQLException {
        ResultSet rs = db.getdb("select count(*) from cure_formate");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }

        rs = db.getdb("select * from cure_formate order by formate");
        temp7 = new String[lenght];
        int i = 0;

        while (rs.next()) {
            try {
                temp7[i] = rs.getString(1);
                i++;

            } catch (SQLException ex) {
                Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void curplace() throws SQLException {
        ResultSet rs = db.getdb("select count(*) from cure_places");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }

        rs = db.getdb("select * from cure_places");
        temp8 = new String[lenght];
        int i = 0;

        while (rs.next()) {
            try {
                temp8[i] = rs.getString(1);
                i++;

            } catch (SQLException ex) {
                Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

//names of search 
    public static void sename() {
       
        try {
             ResultSet rs = db.getdb("select count(*) from patient ");
            rs.next();
       
        int lenght = 0;

      
            lenght = rs.getInt(1);
        
        System.out.println(lenght);

        rs = db.getdb("select first_name ,second_name, last_name from patient;");
        temp9 = new String[lenght][3];
        temp10 = new String[lenght];
        int i = 0;
       
            while (rs.next()) {
                try {

                    temp9[i][0] = rs.getString(1);
                    temp9[i][1] = rs.getString(2);
                    temp9[i][2] = rs.getString(3);
                    temp10[i] = temp9[i][0];
                    temp10[i] += " " + temp9[i][1];
                    temp10[i] += " " + temp9[i][2];
                    i++;

                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sename(String s) {
        ResultSet rs = db.getdb("select count(*) from patient ");
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        int lenght = 0;

        try {
            lenght = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(lenght);

        rs = db.getdb("select first_name ,second_name, last_name from patient where first_name like '%" + s + "%'  or second_name like '%" + s + "%' or  last_name like '%" + s + "%';");
        temp9 = new String[lenght][3];
        temp10 = new String[lenght];
        int i = 0;
        try {
            while (rs.next()) {
                try {
                    temp9[i][0] = rs.getString(1);
                    temp9[i][1] = rs.getString(2);
                    temp9[i][2] = rs.getString(3);
                    temp10[i] = temp9[i][0];
                    temp10[i] += " " + temp9[i][1];
                    temp10[i] += " " + temp9[i][2];

                    i++;

                } catch (SQLException ex) {
                    Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(main_fram.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    static String[] getallchor() throws SQLException{
    ResultSet rs = db.getdb("select * from chronic_disease order by description;");
    int lenght = 0;
        while (rs.next()) {
            lenght++;
        }
             rs = db.getdb("select * from chronic_disease;");

    String [] a = new String[lenght];
    int i =0;
    while (rs.next()) {
            a[i]=rs.getString(2);
            if(a[i].contains("General")){
           a[i]=  a[i].replaceAll("General", "");
                i++;
            }
            else a[i]="";
           
        }
    return a;
    }
    static String[] getallchoreye() throws SQLException{
    ResultSet rs = db.getdb("select * from chronic_disease order by description;");
    int lenght = 0;
        while (rs.next()) {
            lenght++;
        }
             rs = db.getdb("select * from chronic_disease;");

    String [] a = new String[lenght];
    int i =0;
    while (rs.next()) {
            a[i]=rs.getString(2);
           
            if(a[i].contains("Eye")){
           a[i]=  a[i].replaceAll("Eye", "");
                i++;}
              else a[i]="";
        }
    return a;
    }
    static String[] getchor(int id) throws SQLException{
    ResultSet rs = db.getdb("select distinct text from chronically  where  patient_patient_id ='"+id+"';;");
    int lenght = 0;
        while (rs.next()) {
            lenght++;
        }
             rs = db.getdb("select distinct text from chronically  where  patient_patient_id ='"+id+"';;");

    String [] a = new String[lenght];
    int i =0;
    while (rs.next()) {
            a[i]=rs.getString(1);
            try{
            if(a[i].contains("General")){
               a[i] = a[i].replaceAll("General", "");
                i++;
            }
         a[i]="";
        } catch(Exception ex){}
    }
       
    return a;
    }
    static String[] getchoreye(int id) throws SQLException{
    ResultSet rs = db.getdb("select distinct text from chronically  where  patient_patient_id ='"+id+"';;");
    int lenght = 0;
        while (rs.next()) {
            lenght++;
        }
             rs = db.getdb("select distinct text from chronically  where  patient_patient_id ='"+id+"';;");

    String [] a = new String[lenght];
    int i =0;
    while (rs.next()) {
        try{
            a[i]=rs.getString(1);
            if(a[i].contains("Eye")){
               a[i] = a[i].replaceAll("Eye", "");
                i++;
            }
         a[i]="";}
        catch(Exception ex) {};
        }
    return a;
    }
   
}
